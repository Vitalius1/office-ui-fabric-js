<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
	<meta charset="utf-8">
	<title>Office UI Fabric JS</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <script type="text/javascript" src="https://cdn.graph.office.net/prod/Scripts/fabric-js/fabric.min.js"></script>
  <link rel="stylesheet" href="{{relativePath}}styles.css" />
  <link rel="stylesheet" href="https://cdn.graph.office.net/prod/css/fabric-js/fabric.min.css" />
  <link rel="stylesheet" href="https://cdn.graph.office.net/prod/css/fabric-js/fabric.components.min.css" />
  <script type="text/javascript" src="https://cdn.graph.office.net/prod/Scripts/fabric-js/scrollTo.js"></script>
  {{#if pageInfo.isDatePicker}}
  <script type="text/javascript">
    // This is a workaround solution for toggling the requirejs module bundler to skip the script loading pickadate.js only for this page.
    // Issue description: https://requirejs.org/docs/errors.html#mismatch
    // Solution: https://www.npmjs.com/package/requirejs-toggle - minus the console.logs
    // Toggle OFF requirejs saving it to __requirejsToggleBackup
    if (window.__requirejsToggleBackup) {
      Object.assign(window, window.__requirejsToggleBackup)
      delete window.__requirejsToggleBackup
    } else {
      window.__requirejsToggleBackup = {
        define: window.define,
        require: window.require,
        requirejs: window.requirejs
      }
      for (const field of Object.keys(window.__requirejsToggleBackup)) {
        window[field] = undefined
      }
    }
  </script>
  <script type="text/javascript" src="https://cdn.graph.office.net/prod/Scripts/fabric-js/PickaDate.js"></script>
  <script type="text/javascript">
    // Toggle ON requirejs from __requireToggleBackup
    if (window.__requirejsToggleBackup) {
      Object.assign(window, window.__requirejsToggleBackup)
      delete window.__requirejsToggleBackup
    } else {
      window.__requirejsToggleBackup = {
        define: window.define,
        require: window.require,
        requirejs: window.requirejs
      }
      for (const field of Object.keys(window.__requirejsToggleBackup)) {
        window[field] = undefined
      }
    }
  </script>
  {{/if}}
</head>
<body>
  <div class="main">
    <div class="App-deprecationMessage">
      <i class="ms-Icon ms-Icon--Info deprecationIcon"></i>
      <span class="deprecationMessage">This project is deprecated and no further maintained! To build experiences that align with Office design language learn more about <a href="https://developer.microsoft.com/fabric" class="reactLink">Fabric React</a>.</span>
    </div>
    <div class="ms-Fabric ms-font-m App">
      <div class="App-wrapper">
        <div class="App-nav">
          <nav class="nav">
            {{#if componentsPage}}
            <ul class="links">
              <% components.forEach(function(component) { %>
              <li class="link">
                <a href="{{relativePath}}components/<%= component.name %>/<%= component.name %>" data-url="components/<%= component.name %>/<%= component.name %>"><%= component.title %></a>
              </li>
              <% }); %>
            </ul>
            {{/if}}
          </nav>
        </div>
        <div id="mainContent" class="App-content">
          {{ renderDocPage props=props }}
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript">
    (function(){
      // Highlight current component link in SideBar navigation.
      function navLinkHighlight() {
        const ALL_NAV_LINKS = document.querySelectorAll(".nav .link > a");
        const NAV_LINKS_LIST = document.querySelector(".links");
        const URL_PATH = window.location.pathname;

        for (var i = 0; i < ALL_NAV_LINKS.length; i++) {
          var targetURL = ALL_NAV_LINKS[i].getAttribute("data-url")
          var indexOfTarget = URL_PATH.indexOf(targetURL);
          if (indexOfTarget > -1) {
            ALL_NAV_LINKS[i].parentNode.classList.add("isActive");
          }
        }
      }

      navLinkHighlight();

      // Add isAttached to pageHeader on scroll
      const FULL_HEADER_HEIGHT = 236;
      const ATTACHED_HEADER_HEIGHT = 128;
      const SCROLL_THRESHOLD = FULL_HEADER_HEIGHT - ATTACHED_HEADER_HEIGHT;

      const pageHeader = document.querySelector('.pageHeader');
      if (pageHeader) {
        window.onscroll = checkHeaderAttachment;

        function checkHeaderAttachment() {
          var scroll = window.scrollY || document.documentElement.scrollTop;
          if (scroll >= SCROLL_THRESHOLD) {
            if (!pageHeader.classList.contains('isAttached')) {
              pageHeader.classList.add('isAttached');
            }
          } else {
            if (pageHeader.classList.contains('isAttached')) {
              pageHeader.classList.remove('isAttached');
            }
          }
        }
      }

    })();
  </script>
</body>
</html>